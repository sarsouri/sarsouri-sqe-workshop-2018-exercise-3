import {build} from '../src/js/buildTheGraph';
import assert from 'assert';

/*function tostring(color,n) {
    var s='{';
    for (let i=1;i<n;i++) {
        if (color.has(i)){
            if (color.get(i)) {
                s=s+'(line '+i.toString()+':green'+'),';
            }else {
                s=s+'(line '+i.toString()+':red'+'),';
            }
        }

    }
    s=s+'}';
    return s;
}
json-summary
json-summary
json-summary
*/
describe('The javascript parser', () => {
    it('we want to test this statement : 1', () => {  assert.equal( build('function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x + 5;\n' + '    } else {\n' + '        c = c + z + 5;\n' + '    }\n' + '    \n' + '    return c;\n' + '}\n','2,3,5'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="b < z", shape="diamond",color="green"]\n' + 'n4-> n5[label="T"]\n' + 'n4-> n6[label="F"]\n' + 'n5[label="c = c + 5;", shape="rectangle",color="black"]\n' + 'n5-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n9[]\n' + 'n9[label="return c;", shape="rectangle",color="green"]\n' + 'n6[label="b < z * 2", shape="diamond",color="green"]\n' + 'n6-> n7[label="T"]\n' + 'n6-> n8[label="F"]\n' + 'n7[label="c = c + x + 5;", shape="rectangle",color="green"]\n' + 'n7-> n3[]\n' + 'n8[label="c = c + z + 5;", shape="rectangle",color="black"]\n' + 'n8-> n3[]\n' + '}'); });
    it('we want to test this statement : 1', () => {  assert.equal( build('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   while (a < z) {\n' + '       c = a + b;\n' + '       b = c * 2;\n' + '       a++;\n' + '   }\n' + '   \n' + '   return z;\n' + '}\n','1,2,3'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n5[]\n' + 'n5[label="a < z", shape="diamond",color="green"]\n' + 'n5-> n6[label="T"]\n' + 'n5-> n4[label="F"]\n' + 'n6[label="c = a + b;\n' + 'b = c * 2;\n' + 'a++;", shape="rectangle",color="green"]\n' + 'n6-> n3[]\n' + 'n4[label=" ", shape="circle",color="green"]\n' + 'n4-> n9[]\n' + 'n9[label="return z;", shape="rectangle",color="green"]\n' + '}'); });
    it('we want to test this statement : 2', () => {  assert.equal( build('function foo(x, y, z){\n' + '    let a = 15;\n' + '    let b = 22;\n' + '    let c ;\n' + '    if (b<z)\n' + '       return x ;\n' + '}','1,2,33'),'digraph G {n0[label="let a = 15;\n' + 'let b = 22;\n' + 'let c;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="b < z", shape="diamond",color="green"]\n' + 'n4-> n5[label="T"]\n' + 'n4-> n3[label="F"]\n' + 'n5[label="return x;", shape="rectangle",color="green"]\n' + 'n3[label=" ", shape="circle",color="black"]\n' + '}'); });
    it('we want to test this statement : 3', () => {  assert.equal( build('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   while (a < z) {\n' + '       c = a + b;\n' + '       b = c * 2;\n' + '       a++;\n' + '   }\n' + '   b=15;\n' + '   c=25;\n' + '   return z;\n' + '}\n','3,3,1'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n5[]\n' + 'n5[label="a < z", shape="diamond",color="green"]\n' + 'n5-> n6[label="T"]\n' + 'n5-> n4[label="F"]\n' + 'n6[label="c = a + b;\n' + 'b = c * 2;\n' + 'a++;", shape="rectangle",color="black"]\n' + 'n6-> n3[]\n' + 'n4[label=" ", shape="circle",color="green"]\n' + 'n4-> n9[]\n' + 'n9[label="b = 15;\n' + 'c = 25;", shape="rectangle",color="green"]\n' + 'n9-> n11[]\n' + 'n11[label="return z;", shape="rectangle",color="green"]\n' + '}'); });
    it('we want to test this statement : 4', () => {  assert.equal( build('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   if (a < z) {\n' + '       c = a + b;\n' + '       b = c * 2;\n' + '       a++;\n' + '   }else{\n' + '   b=15;\n' + '   c=25;\n' + '}\n' + '   return z;\n' + '}\n','3,3,1'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="a < z", shape="diamond",color="green"]\n' + 'n4-> n5[label="T"]\n' + 'n4-> n8[label="F"]\n' + 'n5[label="c = a + b;\n' + 'b = c * 2;\n' + 'a++;", shape="rectangle",color="black"]\n' + 'n5-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n10[]\n' + 'n10[label="return z;", shape="rectangle",color="green"]\n' + 'n8[label="b = 15;\n' + 'c = 25;", shape="rectangle",color="green"]\n' + 'n8-> n3[]\n' + '}'); });
    it('we want to test this statement : 1', () => {  assert.equal( build('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   if (a < z) {\n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    } \n' + '   }\n' + '  return z;\n' + '}\n','2,2,6'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="a < z", shape="diamond",color="green"]\n' + 'n4-> n6[label="T"]\n' + 'n4-> n3[label="F"]\n' + 'n6[label="b < z", shape="diamond",color="green"]\n' + 'n6-> n7[label="T"]\n' + 'n6-> n5[label="F"]\n' + 'n7[label="c = c + 5;", shape="rectangle",color="green"]\n' + 'n7-> n5[]\n' + 'n5[label=" ", shape="circle",color="green"]\n' + 'n5-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n8[]\n' + 'n8[label="return z;", shape="rectangle",color="green"]\n' + '}'); });
    it('we want to test this statement : 1', () => {  assert.equal( build('function foo(x, y, z){\n' + '   let a = x + 1;\n' + '   let b = a + y;\n' + '   let c = 0;\n' + '   \n' + '   if (a < z) {\n' + '    if (b < z) \n' + '        c = c + 5;\n' + '   while (false) {\n' + '       c = a + b;\n' + '       z = c * 2;\n' + '       a++;\n' + '   }\n' + '   }\n' + '  return z;\n' + '}\n','2,2,6'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="a < z", shape="diamond",color="green"]\n' + 'n4-> n6[label="T"]\n' + 'n4-> n3[label="F"]\n' + 'n6[label="b < z", shape="diamond",color="green"]\n' + 'n6-> n7[label="T"]\n' + 'n6-> n5[label="F"]\n' + 'n7[label="c = c + 5;", shape="rectangle",color="green"]\n' + 'n7-> n5[]\n' + 'n5[label=" ", shape="circle",color="green"]\n' + 'n5-> n8[]\n' + 'n8[label=" ", shape="circle",color="green"]\n' + 'n8-> n10[]\n' + 'n10[label="false", shape="diamond",color="green"]\n' + 'n10-> n11[label="T"]\n' + 'n10-> n9[label="F"]\n' + 'n11[label="c = a + b;\n' + 'z = c * 2;\n' + 'a++;", shape="rectangle",color="black"]\n' + 'n11-> n8[]\n' + 'n9[label=" ", shape="circle",color="green"]\n' + 'n9-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n14[]\n' + 'n14[label="return z;", shape="rectangle",color="green"]\n' + '}'); });
    it('we want to test this statement : 1', () => {  assert.equal( build('function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '    }\n' + '    c--;\n' + '    return c;\n' + '}\n','22,23,1'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="b < z", shape="diamond",color="green"]\n' + 'n4-> n5[label="T"]\n' + 'n4-> n3[label="F"]\n' + 'n5[label="c = c + 5;", shape="rectangle",color="black"]\n' + 'n5-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n6[]\n' + 'n6[label="c--;", shape="rectangle",color="green"]\n' + 'n6-> n7[]\n' + 'n7[label="return c;", shape="rectangle",color="green"]\n' + '}'); });
    it('we want to test this statement : 1', () => {  assert.equal( build('function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (!true) {\n' + '        c = c + 5;\n' + '    }\n' + '    c--;\n' + '    return c;\n' + '}\n','1,1,1'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="!true", shape="diamond",color="green"]\n' + 'n4-> n5[label="T"]\n' + 'n4-> n3[label="F"]\n' + 'n5[label="c = c + 5;", shape="rectangle",color="black"]\n' + 'n5-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n6[]\n' + 'n6[label="c--;", shape="rectangle",color="green"]\n' + 'n6-> n7[]\n' + 'n7[label="return c;", shape="rectangle",color="green"]\n' + '}'); });
    it('we want to test this statement : 10', () => {  assert.equal( build('function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (!true) {\n' + '        c = c + 5;\n' + '    }\n' + '    c--;\n' + '    return c;\n' + '}\n','1,1,1'),'digraph G {n0[label="let a = x + 1;\n' + 'let b = a + y;\n' + 'let c = 0;", shape="rectangle",color="green"]\n' + 'n0-> n4[]\n' + 'n4[label="!true", shape="diamond",color="green"]\n' + 'n4-> n5[label="T"]\n' + 'n4-> n3[label="F"]\n' + 'n5[label="c = c + 5;", shape="rectangle",color="black"]\n' + 'n5-> n3[]\n' + 'n3[label=" ", shape="circle",color="green"]\n' + 'n3-> n6[]\n' + 'n6[label="c--;", shape="rectangle",color="green"]\n' + 'n6-> n7[]\n' + 'n7[label="return c;", shape="rectangle",color="green"]\n' + '}'); });
/*'function foo(x, y, z){\n' + '    let a = x + 1;\n' + '    let b = a + y;\n' + '    let c = 0;\n' + '    \n' + '    if (b < z) {\n' + '        c = c + 5;\n' + '        return x + y + z + c;\n' + '    } else if (b < z * 2) {\n' + '        c = c + x + 5;\n' + '        return x + y + z + c;\n' + '    } else {\n' + '        c = c + z + 5;\n' + '        return x + y + z + c;\n' + '    }\n' + '}\n'
*/
});
